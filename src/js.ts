export const btoa = (data: string) => window.btoa(data)

const BASE64_ALPHABET: string[] = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4',
    '5', '6', '7', '8', '9', '+', '/',
];

export function base64(data: string): string {
    let result = '';
    let buffer = 0;
    let bits = 0;

    for (let i = 0; i < data.length; i++) {
        buffer = (buffer << 8) | data.charCodeAt(i);
        bits += 8;

        while (bits >= 6) {
            bits -= 6;
            let index = (buffer >> bits) & 0b111111;
            result += BASE64_ALPHABET[index];
        }
    }

    if (bits > 0) {
        buffer <<= 6 - bits;
        result += BASE64_ALPHABET[(buffer & 0b111111)];
    }

    while (result.length % 4 !== 0) {
        result += '=';
    }

    return result;
}

export function base64Bytes(data: Uint8Array): string {
    let result = '';
    let buffer = 0;
    let bits = 0;

    for (let i = 0; i < data.length; i++) {
        buffer = (buffer << 8) | data[i];
        bits += 8;

        while (bits >= 6) {
            bits -= 6;
            let index = (buffer >> bits) & 0b111111;
            result += BASE64_ALPHABET[index];
        }
    }

    if (bits > 0) {
        buffer <<= 6 - bits;
        result += BASE64_ALPHABET[(buffer & 0b111111)];
    }

    while (result.length % 4 !== 0) {
        result += '=';
    }

    return result;
}

export function fib(n: number): number {
    if (n < 2) return n
    return fib(n - 1) + fib(n - 2)
}

export function fibObject(n: number, cache: Record<string, number> = {}): number {
    if (n in cache) return cache[n]
    if (n < 2) return n
    const result = fibObject(n - 2, cache) + fibObject(n - 1, cache)
    cache[n] = result
    return result
}

export function fibMap(n: number, cache: Map<number, number> = new Map()): number {
    if (cache.has(n)) return cache.get(n)!
    if (n < 2) return n
    const result = fibMap(n - 2, cache) + fibMap(n - 1, cache)
    cache.set(n, result)
    return result
}

export function generateMatrix(rows, cols) {
    let matrix = [];
    for (let i = 0; i < rows; i++) {
        matrix[i] = [];
        for (let j = 0; j < cols; j++) {
            matrix[i][j] = Math.floor(Math.random() * 10); // Generating random numbers between 0 and 9
        }
    }
    return matrix;
}

export function multiplyMatrices(a: number[][], b: number[][]) {
    const rowsA = a.length;
    const colsA = a[0].length;
    const colsB = b[0].length;

    const result = new Array(rowsA);
    for (let i = 0; i < rowsA; i++) {
        result[i] = new Array(colsB).fill(0);
    }

    for (let i = 0; i < rowsA; i++) {
        for (let j = 0; j < colsB; j++) {
            for (let k = 0; k < colsA; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    return result;
}

const CRC32_POLY = 0xEDB88320;
const CRC64_POLY = 0xC96C5795D7870F42n;
const CRC64_LUT = [0n, 12911341560706588527n, 17619267392293085275n, 5164075066763771700n, 8921845837811637811n, 14483170935171449180n, 10328150133527543400n, 4357999468653093127n, 17843691675623275622n, 4940391307328217865n, 226782375002905661n, 12685511915359257426n, 10119945210068853333n, 4566377562367245626n, 8715998937306186254n, 14689403211693301089n, 9051005139383707209n, 14895072503764629798n, 9880782614656435730n, 4193374422961527165n, 453564750005811322n, 13070904082541799189n, 17496296445768931361n, 4747102235666401102n, 9960315520700766767n, 4113029525020509504n, 9132755124734491252n, 14812441257301386523n, 17431997874612372508n, 4811156168024382323n, 391483189436228679n, 13132671735097031464n, 18102010278767414418n, 5195199925788447741n, 1131375642422963401n, 13591081480414639014n, 9288535643022529185n, 3731739485546663374n, 8386748845923054330n, 14361410892855143829n, 907129500011622644n, 13814943346342178715n, 17875617253995106479n, 5421418680781082560n, 8594564625313771207n, 14152643483341451688n, 9494204471332802204n, 3525329033817543155n, 9704381199536204507n, 3855837706121835956n, 8226059050041019008n, 13908973417437222383n, 18265510249468982504n, 5643692520190618503n, 718348998302913715n, 13463047253836762076n, 8146277531524994749n, 13989069943491807698n, 9622312336048764646n, 3938150108875254153n, 782966378872457358n, 13399312233903888353n, 18327840216347633877n, 5582173445676054458n, 7257036000092981153n, 15535280666427316430n, 10390399851576895482n, 2529986302517213333n, 2262751284845926802n, 12414353723947190013n, 16997392145760156105n, 6398650419759490726n, 10599130201908394951n, 2322133910755632296n, 7463478971093326748n, 15329644185724306675n, 16773497691846108660n, 6622864283287239323n, 2036569382881248687n, 12640783567252986560n, 1814259000023245288n, 12250853444207230599n, 17125426475222188467n, 6811676960462675676n, 7132938157145702363n, 15119434731753103540n, 10842837361562165120n, 2690676064372932847n, 17189129250627542414n, 6747026957542163169n, 1875814858707893717n, 12188560364711551674n, 10762704257491731389n, 2770420489343360210n, 7050658067635086310n, 15201536148867841161n, 11493583972846619443n, 3219832958944941148n, 7711675412243671912n, 15576564987190227975n, 16452118100082038016n, 6305011443818121839n, 1213047649942025563n, 11816267669673208372n, 7503259434831574869n, 15784731923736995898n, 11287385040381237006n, 3425713581329221729n, 1436697996605827430n, 11591809733187859977n, 16677985422973077821n, 6078267261889762898n, 16292555063049989498n, 5851447209550246421n, 1630020308903038241n, 11939238787801010766n, 11081681957373440841n, 3090674103720225830n, 7876300217750508306n, 16023932746787097725n, 1565932757744914716n, 12003503911822413427n, 16230825569204842823n, 5913566482019610152n, 7956607163135676207n, 15944361922680361024n, 11164346891352108916n, 3008957496780927003n, 14514072000185962306n, 8809633696146542637n, 4460922918905818905n, 10287960411460399222n, 12879331835779764593n, 113391187501452830n, 5059972605034426666n, 17660565739912801861n, 4525502569691853604n, 10224187249629523019n, 14576435430675780479n, 8748148222884465680n, 4980157760350383383n, 17740628527280140920n, 12797300839518981452n, 195741594718114339n, 13040162471224305931n, 565687821211481700n, 4644267821511264592n, 17536326748496696895n, 14926957942186653496n, 8937808626997553239n, 4297282312656885603n, 9839608450464401420n, 4852190599768102253n, 17327666750234135042n, 13245728566574478646n, 359174499151456857n, 4073138765762497374n, 10063573324157604913n, 14700457781105076997n, 9163920108173816938n, 3628518000046490576n, 9328460452529085631n, 14330211790445699979n, 8498696072880078052n, 5299565100954197475n, 18061012165519327884n, 13623353920925351352n, 1018284691440624343n, 14265876314291404726n, 8562713237611094233n, 3566469078572851181n, 9390260331795218562n, 13702854325316886917n, 937907429353946858n, 5381352128745865694n, 17978417549248290481n, 5746791986423309721n, 18225777846762470134n, 13494053915084326338n, 606523824971012781n, 3751629717415787434n, 9745292510640121029n, 13876787882151992305n, 8338992711486538910n, 13285957365033343487n, 815010154451519120n, 5540840978686720420n, 18431906428167644875n, 14101316135270172620n, 8115412784602421411n, 3978303581567838103n, 9519354766961195256n, 12527462061959317731n, 2230461459452909452n, 6439665917889882296n, 16893009583564617687n, 15423350824487343824n, 7288217715337890239n, 2490078880175191691n, 10493603952060017124n, 6520081235612152965n, 16813546994155744234n, 12610022887636243678n, 2148641156328442801n, 2426095299884051126n, 10557972909709735385n, 15361512820870335213n, 7350228890552538498n, 15006518869663149738n, 7165105895222849989n, 2649782550477098737n, 10947027550912647582n, 12362696414880903321n, 1783234539286425590n, 6851427162658443458n, 17022309211647725485n, 2873395993211654860n, 10722532847870938531n, 15232418832718623383n, 6938393941075996152n, 6642978682516671743n, 17230443782969840528n, 12156534523779525796n, 1989151790783919051n, 6263731030979658865n, 16556202624882645790n, 11702894419100492842n, 1245039440087595845n, 3260040617806076482n, 11390642587947386157n, 15688795063501830681n, 7680756410435167606n, 11622868312827688983n, 1324891275238549368n, 6181348207440451660n, 16638201170595874595n, 15752600435501016612n, 7616209416359311691n, 3321489341258335871n, 11328242235714328848n, 3131865515489829432n, 10977756817953029463n, 16137146508898304611n, 7844397531750915340n, 5811434156413844491n, 16395372229761246052n, 11827132964039220304n, 1660744670629167935n, 15913214326271352414n, 8068573254449152305n, 2905717078206922245n, 11204220263579804010n, 12035829987123708013n, 1452858539103461122n, 6017914993561854006n, 16189773752444600153n];


export function crc32(data: Uint8Array): number {
  let crc = 0xFFFFFFFF;

  for (let i = 0; i < data.length; i++) {
    crc ^= data[i];

    for (let j = 0; j < 8; j++) {
      const mask = -(crc & 1);
      crc = (crc >>> 1) ^ (CRC32_POLY & mask);
    }
  }

  return crc ^ 0xFFFFFFFF;
}

export function crc64(data: Uint8Array): bigint {
  let crc = 0xFFFFFFFFFFFFFFFFn;

  for (let i = 0; i < data.length; i++) {
    crc ^= BigInt(data[i]);

    for (let j = 0; j < 8; j++) {
      const mask = -(crc & 1n);
      crc = (crc >> 1n) ^ (CRC64_POLY & mask);
    }
  }

  return crc ^ 0xFFFFFFFFFFFFFFFFn;
}


export function crc64lut(data: Uint8Array): bigint {
  let crc = 0xFFFFFFFFFFFFFFFFn;

  for (let i = 0; i < data.length; i++) {
    const idx = Number((crc ^ BigInt(data[i])) & 0xFFn);
    crc = CRC64_LUT[idx] ^ (crc >> 8n);
  }

  return crc ^ 0xFFFFFFFFFFFFFFFFn;
}

export const createElements = (n: number) => {
    const container = document.querySelector(".container")!

    for (let i = 0; i < n; ++i) {
        let div = document.createElement("div");
        container.appendChild(div);
    }
}

export const updateEvery2ndElement = () => {
    const container = document.querySelector(".container")!;
    const children = container.children

    for (let i = 0; i < children.length; i += 2) {
        const child = children.item(i)
        if (child) {
            if (!child.textContent) {
                child.textContent = i.toString()
            } else {
                child.textContent = null
            }
        }
    }
}

export const clearElements = () => {
    const container = document.querySelector(".container")!
    container.innerHTML = ''
}


async function bufferToBase64(buffer) {
  const base64url = await new Promise(r => {
    const reader = new FileReader()
    reader.onload = () => r(reader.result)
    reader.readAsDataURL(new Blob([buffer]))
  });
  return base64url.slice(base64url.indexOf(',') + 1);
}


export function cryptoRandomString(n: number) {
    const MAX_VALUES = 65536
    const result = Array(Math.floor(n / MAX_VALUES)).fill(MAX_VALUES)
    result.push(n % MAX_VALUES)

    return result.flatMap(n => [...window.crypto.getRandomValues(new Uint8Array(n))])
        .map(k => String.fromCharCode(k))
        .join('')
}
